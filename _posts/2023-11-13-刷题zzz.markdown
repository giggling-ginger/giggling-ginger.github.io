---
layout: post
title: "刷题zzz"
date: 2023-11-13 12:16:48 -0800
categories: jekyll update
---

一旦开始学习，就会摸鱼开始干各种事情。于是有了这个 blog。

最近在拣回三年没刷的力扣手感，目前在过 Neetcode。有的写得不错，有的比较迷惑（不过题解都是这样，没有百分百满意的，各取所长吧）。

这道题就写得很迷惑：[46.Permutations][permutations]

```python
class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        res = []

        # base case
        if len(nums) == 1:
            return [nums[:]]  # nums[:] is a deep copy

        for i in range(len(nums)):
            n = nums.pop(0)
            perms = self.permute(nums)

            for perm in perms:
                perm.append(n)
            res.extend(perms)
            nums.append(n)
        return res
```

[permutations]: https://leetcode.com/problems/permutations/

咋就直接用上 permute 了……面试真的让这么写吗？那不如这样写好了，一行搞定：

```python
class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        return list(permutations(nums))
```

最后还是老实用交换写的：

```python
class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        res = []
        n = len(nums)

        def backtrack(first = 0):
            if first == n:
                res.append(nums[:])
            for i in range(first, n):
                nums[first], nums[i] = nums[i], nums[first]
                backtrack(first + 1)
                nums[first], nums[i] = nums[i], nums[first]

        backtrack()

        return res
```

- No difference between [:] and [::], sometimes [:] is slightly faster. https://stackoverflow.com/questions/41648821/difference-between-and-slicing-when-copying-a-list
- L[:] and L.copy() is identical. https://stackoverflow.com/questions/68107099/list-slicing-vs-copying
-
